@model V3OperationTraitDefinitionViewModel
@{
    var operationTraitName = Model.Index.HasValue ? $"operation_trait_{Model.Name}_{Model.Index}" : Model.Name;
    var operationTrait = Model.Definition;
    var operation = operationTrait as V3OperationDefinition;
}
<div class="mt-3">
    <div class="card">
        <a data-bs-toggle="collapse" href="#@operationTraitName" role="button" aria-expanded="false" class="collapsed">
            <div class="card-header">
                <div class="row d-flex align-items-center">
                    <div class="col-md-6">
                        <i class="caret text-dark me-2"></i>
                        @if (operation != null)
                        {
                            var badgeColor = operation.Action == V3OperationAction.Send ? "info" : "info";
                            var badgeTooltip = operation.Action == V3OperationAction.Send ? "An operation used to publish a message to the specified channel." : "An operation used to subscribe to messages from the specified channel.";
                            var badgeText = operation.Action == V3OperationAction.Send ? "send" : "receive";
                            <span class="badge border me-2 border-@badgeColor text-@badgeColor w-60-px" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@badgeTooltip">@badgeText</span>
                        }
                        @if(Model.Index.HasValue)
                        {
                            <span class="fw-bold fs-5 text-secondary align-middle">#@Model.Index</span>
                            <span class="text-muted align-middle mx-2" role="button" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true" title="@Html.Raw(Markdown.ToHtml(operationTrait.Description ?? string.Empty))">@operationTrait.Title</span>
                        }
                        else
                        {
                            <span class="my-1 text-secondary" role="button" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true" title="@Html.Raw(Markdown.ToHtml(operationTrait.Description ?? string.Empty))">@Model.Name</span>
                        }
                        @if (operation != null)
                        {
                            <small class="border border-secondary rounded px-2 font-italic text-muted ms-2">@operation.Channel.Reference</small>
                        }

                    </div>
                    <div class="col-md-6 text-end">
                        @if (operationTrait.Tags != null)
                        {
                            foreach (var tag in operationTrait.Tags)
                            {
                                <span class="badge rounded-pill border border-secondary text-secondary" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@tag.Description">@tag.Name</span>
                            }
                        }
                    </div>
                </div>
            </div>
        </a>
        <div id="@operationTraitName" class="card-body collapse">
            @if (!string.IsNullOrWhiteSpace(operationTrait.Description))
            {
                <small class="text-secondary">@Html.Raw(Markdown.ToHtml(operationTrait.Description))</small>
            }

            @if (operation != null)
            {

                if (operation.Traits != null && operation.Traits.Count > 0)
                {
                    var index = 1;
                    <div class="card border-0 mb-3">
                        <a data-bs-toggle="collapse" href="#@(operationTraitName)_traits" role="button" aria-expanded="false" class="collapsed">
                            <div class="card-header bg-transparent">
                                <i class="caret text-dark"></i>
                                <span class="font-weight-bold text-secondary">Traits</span>
                            </div>
                        </a>
                        <div id="@(operationTraitName)_traits" class="card-body m-0 p-0 collapse">
                            @foreach (var traitDefinition in operation.Traits)
                            {
                                var trait = string.IsNullOrWhiteSpace(traitDefinition.Reference) ? traitDefinition : Model.Document.DereferenceOperationTrait(traitDefinition.Reference);
                                <partial name="v3/_V3OperationTrait" model="@(new V3OperationTraitDefinitionViewModel(Model.Document, Model.Name, trait, index))" />
                                index++;
                            }
                        </div>
                    </div>
                }

                <div class="card border-0 mb-3">
                    <a data-bs-toggle="collapse" href="#@(operationTraitName)_messages" role="button" aria-expanded="false">
                        <div class="card-header bg-transparent">
                            <i class="caret text-dark"></i>
                            <span class="font-weight-bold text-secondary">Message(s)</span>
                        </div>
                    </a>
                    <div id="@(operationTraitName)_messages" class="card-body p-0 m-0 collapse show">
                        @if (operation.Messages == null)
                        {
                            <p class="alert alert-warning fst-italic m-3"><small>No messages have been defined for the operation.</small></p>
                        }
                        else
                        {
                            int index = 1;
                            var channelName = operation.Channel.Reference.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Last();
                            var channel = Model.Document.DereferenceChannel(operation.Channel.Reference);
                            foreach (var messageKvp in operation.Messages.ToDictionary(m => m.Reference, m => Model.Document.DereferenceChannelMessage(channelName, channel, m.Reference)))
                            {
                                <partial name="v3/_V3MessageTrait" model="new V3MessageTraitDefinitionViewModel(this.Model.Document, messageKvp.Key.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)[^1], messageKvp.Value, index)" />
                                index++;
                            }
                        }
                    </div>
                </div>
            }

            <div class="card border-0">
                <a data-bs-toggle="collapse" href="#@(operationTraitName)_bindings" role="button" aria-expanded="false">
                    <div class="card-header bg-transparent">
                        <i class="caret text-dark"></i>
                        <span class="font-weight-bold text-secondary">Bindings</span>
                    </div>
                </a>
                <div id="@(operationTraitName)_bindings" class="card-body m-0 p-0 collapse show">
                    @if (operationTrait.Bindings == null)
                    {
                        <p class="alert alert-warning fst-italic my-3"><small>No bindings defined.</small></p>
                    }
                    else
                    {
                        var bindings = string.IsNullOrWhiteSpace(operationTrait.Bindings.Reference) ? operationTrait.Bindings : Model.Document.DereferenceOperationBinding(operationTrait.Bindings.Reference);
                        @foreach (var binding in bindings.AsEnumerable())
                        {
                            <partial name="v3/_V3Binding" model="new V3BindingDefinitionViewModel(this.Model.Document, binding, operationTraitName)" />
                        }
                    }
                </div>
            </div>

        </div>
    </div>
</div>